
Installation of Docker:

# yum install docker -y
# systemctl start docker

************************************
Image Commands
**************************************

Scenario 1: 
Search images on Docker Hub
***************************
Signinto docker hub : https://hub.docker.com/

Go to search tab and enter Hello-world ==> images will be displayed, select the offical image
When we run the image it will display welcome message to user.

Scenarios2: 
Search for an Image locally on docker host
**************************************
Go to docker host

# docker search hello  // all images related to hello will be displayed.

2. Pull an image from docker hub

    # docker pull hello-world.   //Image will be pulled from docker Hub

3. Check if Image is present in hub or not

    # docker images   //image will be present, that it is pulled into the host

Naming Convention for an Image:

Imagename:tagname

Userdefined image naming convention

username/imagename:tagname

4. Check specific details of image will be displayed.

   # docker image hello-world   

5. Run an Image

   # docker run hello-world  // container will be created

6. Check container is created

   # docker ps -a

7. Create a new container and give name to the container

# docker run --name c1 hello-world

Understanding Image more:

Go to docker hub where all Images are present
Here you can search any image that we want, check for official tag

Naming convention of unofficial (user defined) Images
Registory/username/repoName:tagname

Naming convention of official Images
Registry/repoName:tagname

If no registryname is present by default it will be docker hub
If no tagname then by default it will be latest


6. Pull an Image and run the container together
*****************************************
# docker run --name u1 ubuntu
# docker images
# docker ps -a
==> this will pull the ubuntu image first from hub
--> then create a ubuntu conatiner with name as u1 in exited state
==> So run command == PULL IMAGE and CREATE CONTAINER
 ===> pull command ==> only pulls image

7. START CONTAINER IN DETACH MODE (pull and run together again)
************************************************************
# docker run --name n1 nginx // image nginx will be pulled and container with name n1 will be running

start the container in detach mode where in container will be running in background.


# docker run --name n1 -d nginx  // starts container in detach mode

# docker ps -a.   // gives all containers, nginx container running


*********************************

Delete all container

docker rm -f $(docker ps -aq)


***************************************************
Command line containers

Creating container in interactive mode

# docker run --name u1 -it ubuntu

We will be in container now   
#ls

Out of container
# ctlpctlq

# docker attach u1
Again inside the container

Now use exit to come out

Both ways we can come out of container in exit case the container will go to exited state.

*************************************


Creating container in interactive mode

# docker run --name c1 -it centos

We will be in container now   
#ls
# yum update -y
# yum install git -y

Out of container
exit

Container is exited now
Start the conatiner again

# docker start c1

# docker attach c1

# Ctldp +Ctlq

# docker stop c1

# docker rm c1
**********************************************
Creating a DB container

REMOVE all images and container before this

# docker run --name mydb -d -e MY_ROOT_PASSWORD=edureka mysql:5

PORT FORWARDING/PORT MAPPING
****************************************

# docker run --name c1 -d -p 8888:80 nginx  // creating container to be accessed from browser

Go to browser

Give public ip:8888

*********************************************
Automatic port mapping

# docker run --name j1 -d -P jenkins

# docker container ls

OR

# docker port containername

On browser

hostip:new port


******************************************************
Docker Volumes
**********************************
Docker Volume Containers
**************************************
# docker volume create myvol   // create a volume on host

# docker volume ls    // list the volume on the host, myvol will be there

# docker volume inspect myvol   // gives the path where volume is created on the host

/var/lib/docker/volumes/myvol/_data   // copy this path on notepad

# cd /var/lib/docker/volumes/myvol/_data  
# ls // no files
# cd

MOUNT THE VOLUME ON A CONTAINER

# docker run --name u1 -it -v myvol:/tmp ubuntu

	# cd /tmp
	# ls
	# touch file1 file2
	#ls
# Ctlp+Ctlq
Use the same path copied above
# cd /var/lib/docker/volumes/myvol/_data  
# ls // file1 and file2 files will be present

Create 1 more new file here --> file should be available in container also

# touch file3
# ls
#cd
# docker ps -a
# docker attach u2 
# ls
# cd /tmp
# ls
# file1, file2 , file3 will be there

REMOVE THE CONTAINER AND CHECK IF FILES ARE AVIALBLE

# docker rm -f u2

# cd /var/lib/docker/volumes/myvol/_data 
# ls  ==> still files will be available.

Delete the volume :
*********************
Delete containers before.

# docker volume rm myvol   // volume will be removed.


**************************************************

DOCKER FILE
*****************************************
Creating our own Images:

2 ways:

1. Creating an image from a running container
2. Using a Docker file

Method 1:Creating an image from a running container

**********************************************

# docker run --name c1 -it centos
	#ls
	# yum update -y
	# yum install git -y
	# git --version
	# ctlp+ctlQ

# docker commit c1 mycentosImage

# docker images   // our image will be available with tag as latest

//Create a container from our own Image

# docker run --name c2 -it mycentosImage
	
push our image into Docker Hub:


# docker tag mycentosImage:latest sonal04/mycentosImage:latest

# docker images   // new image with new name will be created

# docker login   //loginto docker hub
Username:
Password:

# docker push dockerusername/mycentosImage:latest   //image will be pushed to docker hub


Method2 : Creating a docker file and building an image from it
*******************************************************
it is a simple txt file.

# vim dockerfile
	i

FROM centos    // base image information
MAINTAINER edureka
RUN yum -y update            // these are commands that we give for building the image
RUN yum install git -y		// information about packages that shoudl be 					there on the image
VOLUME /data
:wq!

# docker build -t mycentos:git .

When we run the image -->container will be created.

	# docker images


	# docker run --name c1 -it mycentos1:dockerfile
	

==> data folder which is mounted for volume wll be there

	

OTher instructions that we can give in an Image :
FROM: 

MAINTAINER:

RUN:

CMD:

VOLUME:

EXPOSE:

ADD:

**************************************************

Deploy Job in Jenkins:
**************************************
Steps to create a Jenkins job and create docker file and create container for addressbook.war

1. Start the jenkins on AWS instance

# systemctl start jenkins

2. Start docker 
# systemctl start docker

3. Log into jenkins --> go to package job --go to console and copy the path of .war file

4. create a new job -->Deploy

5. Go to build -->shell command

rm -rf mydockerfile
mkdir mydockerfile
cd mydockerfile
cp /var/lib/jenkins/workspace/Package/target/addressbook.war .
touch dockerfile
cat <<EOT>> dockerfile
From tomcat
ADD addressbook.war /usr/local/tomcat/webapps
EXPOSE 8080
CMD ["catalina.sh", "run"]
EOT
sudo docker build -t myimage:$BUILD_NUMBER .
sudo docker run -itd -P myimage:$BUILD_NUMBER

Save the job

Go to instance to give jenkins permission to execute docker commands. As of now we are logged in as admin in jenkins and it doesnt have permission to run docker commands.

So go to
vim /etc/sudoers
i
add under root
Jenkins ALL=NOPASSWD: ALL
:wq!

Go back to jenkins and build now.

==> New image and container will be created

# docker images

# docker ps -a

Access from browser

http://18.221.206.57:32768/addressbook/

******************************************************************************

**************************************************



































































































































